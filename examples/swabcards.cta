* swabcards cta
* Reads a deck of cards from the Card-o-Tron Scanner, then changes
* them from TXTPM to TXTPL or vice-versa. The modified cards are then
* punched with the Card-o-Tron Puncher
*
* devs.cta
* finddev.cta
* readcard.cta
* punchbuf.cta
* wait.cta

    MOVE 0x1000, RSP    * set stack
* Start by looking for the punch
    MOVE $COTP_DDN, R0  * DDN of Comp-o-Tron Punch
    CALL $FINDDEV
    OR R0, R0, R0       * no effect but sets zero flag
    JZERO $END
    MOVE R0, R10        * Puncher register base now in R10
    MOVE I10, R1        * Read status register
    CMP 0x1, R1         * Ready bit should the only one set
    JNZERO $END         * Printer error or not ready

* Now find the card reader
    MOVE $COTS_DDN, R0  * Comp-o-Tron Scanner
    CALL $FINDDEV
    OR R0, R0, R0
    JZERO $END
    MOVE R0, R11        * Card scanner register base now in R11

$MAINLOOP
    MOVE I11, R1
    MOVE 0x1, R2
    AND R1, R2, R2
    JZERO $END
    MOVE 1, R0
    ADD R0, R11, R12    * R12 now points to scanner command reg
    MOVE 1, I12         * Issue read command
$READLOOP
    CALL $WAIT
    MOVE I11, R1
    MOVE 0x8, R2        * Check for busy bit
    AND R1, R2, R2
    JNZERO $READLOOP
* Reading complete, now transfer data into buffer
    MOVE 0x10, R2       * check for completion
    AND R1, R2, R2
    JZERO $END
    MOVE 2, R0          * read card info register
    ADD R0, R11, R12
    MOVE I12, R5        * Info register, keep this around for later
    MOVE 0xC00, R0      * TXTPM || TXTPL
    AND R5, R0, R0
    JZERO $END

*OK, we have valid data in the right format, move it to the buffer
    MOVE 0x2000, R0
    CALL $READCARD
    OR R0, R0, R0
    JZERO $END
    MOVE 0x2000, R0
    MOVE 0x2100, R1
    MOVE 0xFF, R2
    AND R5, R2, R2      * strip length from info register contents
    CALL $SWAB          * no return code
* switch info reg
    MOVE R5, R0
    CALL $SWITCHTYPE    * no return code to test
    MOVE R0, R1
    MOVE 0x2100, R0     * buffer
    CALL $PUNCHBUF
    OR R0, R0, R0
    JZERO $END
$WRITELOOP
    CALL $WAIT
    MOVE I10, R1
    MOVE 0x1, R2        * Check for ready
    AND R1, R2, R2
    JZERO $WRITELOOP

    JMP $MAINLOOP
$END
    INCR R10            * R10 now points to punch command reg
    MOVE 0x10, I10      * Send flush command to end job
    HALT

* SWAB - swap bytes from LSB to MSB (or vice-versa)
* RO - address of source buffer
* R1 - address of destination buffer
* R2 - length of buffer
$SWAB
    SSTATE
    MOVE 24, R3         * shift distance
    MOVE 8, R4          * shift distance
    MOVE 0xFF00, R5     * Mask for single byte
    MOVE 0x00FF0000, R6
$SWABLOOP
* MSB->LSB, shift right 24 bits, no need to mask
    MOVE I0, R8         * Packed word
    SHIFTR R8, R3, R10  * move high byte into R11, no need to mask

* 2nd MSB -> 3rd MSB, shift right 8, mask 0x0000ff00
    SHIFTR R8, R4, R9   * Second byte, shift right to 3rd byte
    AND R9, R5, R9      * R9 now masked off
    OR R9, R10, R10     * ...and placed in R10

* 3rd MSB -> 2nd MSB, shift left 8, mask 0x00ff0000
    SHIFTL R8, R4, R9   * Now move third word up to second
    AND R9, R6, R9      * R9 now masked off
    OR R9, R10, R10     * ...and placed in R10

* LSB -> MSB, shift left 24, no mask
    SHIFTL R8, R3, R9
    OR R9, R10, R10     * ...and placed in R10

    MOVE R10, I1        * place swabbed word
    INCR R1
    INCR R0
    DECR R2
    JNZERO $SWABLOOP
    LSTATE
    RETURN

* SWITCHTYPE - switches type bits in output info
* R0 - input info reg
* On return R0 contains the data for the output
* info register to be programmed to the punch.
* Note that we don't need to test for other card types,
* that is done before this is called.
$SWITCHTYPE
    SSTATE
    MOVE R0, R1     * Will build new value in R1
    MOVE 0xFF, R2
    AND R1, R2, R1  * Strip off length
    MOVE 0x800, R2
    AND R2, R0, R3  * test TXTPM bit
    JZERO $TXTPL    * if not set, jump to end and set it
    MOVE 0x400, R2
    JMP $SWFIN
$TXTPL
    MOVE 0x800, R2  * otherwise, set the TXTPL

$SWFIN
    OR R2, R1, R1
    MOVE R1, R0
    LSTATE
    RETURN


