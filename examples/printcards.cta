* printcards.cta
* Reads a deck of cards from the Card-o-Tron, then prints the text
* on the Print-o-Tron
* assemble this with:
* devs.cta
* finddev.cta
* readcard.cta
* unpack.cta
* printbuf.cta
* wait.cta

    MOVE 0x1000, R14    * set stack
* Start by looking for the printer
    MOVE $POT_DDN, R0 * DDN of Print-o-Tron
    CALL $FINDDEV
    OR R0, R0, R0       * no effect but sets zero flag
    JZERO $END
    MOVE R0, R10        * Printer register base now in R10
    MOVE I10, R1        * Read status register
    OR R1, R1, R1
    JNZERO $END         * Printer error or not ready

* Now find the card reader
    MOVE $COTS_DDN, R0
    CALL $FINDDEV
    OR R0, R0, R0
    JZERO $END
    MOVE R0, R11        * Card scanner register base now in R11

$MAINLOOP
    MOVE I11, R1
    MOVE 0x1, R2
    AND R1, R2, R2
    JZERO $END
    MOVE 1, R0
    ADD R0, R11, R12    * R12 now points to scanner command reg
    MOVE 1, I12         * Issue read command
$READLOOP
    CALL $WAIT
    MOVE I11, R1
    MOVE 0x8, R2        * Check for busy bit
    AND R1, R2, R2
    JNZERO $READLOOP
* Reading complete, now transfer data into buffer
    MOVE 0x10, R2       * check for completion
    AND R1, R2, R2
    JZERO $END
    MOVE 2, R0          * read card info register
    ADD R0, R11, R12
    MOVE I12, R5        * Info register, keep this around for later
    MOVE 0x800, R0     * TXTPM
    AND R5, R0, R0
    JZERO $END

*OK, we have valid data in the right format, move it to the buffer
    MOVE 0x2000, R0
    CALL $READCARD
    OR R0, R0, R0
    JZERO $END
    MOVE 0x2000, R0
    MOVE 0x2100, R1
    MOVE 0xFF, R2
    AND R5, R2, R2      * strip length from info register contents
    CALL $UNPACK
    OR R0, R0, R0
    JZERO $END
    MOVE R0, R1
    MOVE 0x2100, R0
    CALL $PRINTBUF
    OR R0, R0, R0
    JNZERO $MAINLOOP
$END
    HALT



